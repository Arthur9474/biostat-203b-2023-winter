---
title: "203BHW1"
format: html
editor: visual
---

Q2.

Completion Report Link:

https://www.citiprogram.org/verify/?k03a88ce2-5dc0-4796-b537-efafe5c87c27-53710023

Completion Certificate Link:

https://www.citiprogram.org/verify/?w1b2c4572-6f1d-497e-bdfb-3decf007da49-53710023

Q3.

(1.)

```{bash}
ln -s '/c/1 BIOSTATS/203B/mimic' ~/mimic
ls -l ~/mimic
```

(2.) Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files?

```{bash}
ls -l ~/mimic/core
ls -l ~/mimic/hosp
ls -l ~/mimic/icu
```

The uncompressed data is too huge to handle, so it is stored in .csv.gz, which is a compressed form of the csv file, to save space.

(3.)

zcat: display the contents in the compressed file (performing cat function in compressed files).

zless: paging through the contents in a compressed file that allows you to scroll up and down.

zmore: paging the contents in a compressed file, but only able to page down.

zgrep: zgrep search through the contents in a compressed file that matches certain expressions.

(4.)

```{bash}
for datafile in ~/mimic/core/*.gz
do
  ls -l $datafile
done

```

The above command displays all the data files that ended with .gz in the mimic/core folder.

The number of lines in each of the csv.gz file is below:

```{bash}
for datafile in ~/mimic/core/*.gz
do
  wc $datafile -l
done
```

(5.)

```{bash}
zcat ~/mimic/core/admissions.csv.gz | head -n 5 #Display the first 5 row
zcat ~/mimic/core/admissions.csv.gz | wc -l #Display the number of lines
```

```{bash}
zcat ~/mimic/core/admissions.csv.gz | awk -F "\"*,\"*" '{print $1}'| sort | uniq -c |wc -l 
```

There are 256878 unique subjects (patients) in this data file (the header of the column is not included).

(6.)

```{bash}
zcat ~/mimic/core/admissions.csv.gz | awk -F "\"*,\"*" '{print $6}'| tail -n 10
```

Some of he possible values in admission_type are "EW EMER", "URGENT", "SURGICAL SAME DAY ADMISSION", etc. They are categorical, string values.

```{bash}
zcat ~/mimic/core/admissions.csv.gz | awk -F "\"*,\"*" '{print $7}'| tail -n 10
```

Some of he possible values in admission_location are "EMERGENCY ROOM", "TRANSFER FROM HOSPITAL", "PHYSICIAN REFERRAL", etc. They are categorical, string values.

```{bash}
zcat ~/mimic/core/admissions.csv.gz | awk -F "\"*,\"*" '{print $9}'| tail -n 10
```

Some of he possible values in insurance are "Medicaid", "Other", etc. They are categorical, string values.

```{bash}
zcat ~/mimic/core/admissions.csv.gz | awk -F "\"*,\"*" '{print $12}'| tail -n 10
```

Some of he possible values in ethnicity are "WHITE", "HISPANIC/LATINO", "BLACK/AFRICAN AMERICAN", etc. They are categorical, string values.

```{bash}
zcat ~/mimic/core/admissions.csv.gz | awk -F "\"*,\"*" '{print $6}' | sort | uniq -c |wc -l #unique count of admission_type
zcat ~/mimic/core/admissions.csv.gz | awk -F "\"*,\"*" '{print $7}' | sort | uniq -c |wc -l #unique count of admission_location
zcat ~/mimic/core/admissions.csv.gz | awk -F "\"*,\"*" '{print $9}' | sort | uniq -c |wc -l #unique count of insurance
zcat ~/mimic/core/admissions.csv.gz | awk -F "\"*,\"*" '{print $12}' | sort | uniq -c |wc -l #unique count of ethncity
```

So, there are 9 unique admission types, 12 unique admission locations, 3 different types of insurance and 8 types of ethnicity (the header of each column is not included).

Q4

(1.)

```{bash}
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt  pg42671.txt
ls -l
```

wget is a command to capture the content from a url link. The option -nc is used when the same file is downloaded to the same directory, adding -nc option will result in the preservation of the old version of the file, in other words, it prevents the original file to be overwritten.

```{bash}
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  cat pg42671.txt | tr '[:space:]' '[\n*]' | grep -i -o -c $char
done
```

```{bash}
grep --help
```

(2.)

```{bash}
echo 'hello, world' > test1.txt
echo 'hello, world' >> test2.txt
```

The "\>" and "\>\>" signs can both assign the output of the previous command to the designated file. If the designated file does not exist, both signs create a new file, but if the designated file already exists, "\>" simply overwrite the content of the file with the output, while "\>\>" appends the output to the existing file.

For example:

```{bash}
echo 'hello, world' > test3.txt
echo 'HELLO, WORLD' > test4.txt
#output again with different signs
echo 'hello, world' > test3.txt
echo 'HELLO, WORLD' >> test4.txt
#display contents
cat test3.txt
cat test4.txt
```

(3.)

```{bash}
chmod u=rwx,g=rwx,o=rwx middle.sh
ls -l middle.sh
```

```{bash}
./middle.sh pg42671.txt 20 5
```

The output is the 16-20th lines from the pg42671.txt file, including the Author and Editor line.

The "\$1", "\$2", "\$3" are place holders, which indicate the first, second and third argument, which are numbers in this case, after the file name in the command line. Here, the command line tells the middle.sh function to print 5 lines before the 20th line of the file.

The first line is the hash-bang of the script. It tells the operating system what interpreter to use when running the script. In middle.sh it is the /bin/sh interpreter it is using.

Q5.

```{bash}
cal
cal 2021
cal 9 1752
```

Cal: The cal function output displays the month and year of the current time, followed by the calendar of the month. When the command is followed by a year, it displays all the 12 monthly calendars of the year. When the command is followed by a month and a year, it displays the calendar of the designated month.

In this example, the September, 1752 calender is displayed, but the date goes from 2nd directly to the 14th, with 11 days missing. This is because the Julian Calendar has a slight miscalculation on the precise duration of a day, and when people discovered it in around 1752, the mistakes has accumulated around 1000 years so the calendar was 11 days late of the actual date, and so it is adjusted in September, 1752.

date: date function displays the date, month, and the precise hour:minute:seconds of the current time.

hostname: displays the host name of the current system.

arch: prints our the architecture of the current computer.

uname -a: get system identifications, -a means output all the identification information, including operating system, version, hardware information, etc.

uptime: Displays the current time, the running time of the current terminal session, and the average loading time.

whoami: Displays the name of the current user of the shell.

who: Display the user who is currently logged in.

w: Displays the information of the users who are currently logged in, including the output of the uptime command.

id: Displays the user id and the group id of the current user, and other users in the group.

last \| head: last displays the last log in time of the current terminal.

{con, pre}{sent, fer}{s,ed}: when used after echo, they form a list of combinations, each with only one word from one of the three curly brackets.

time sleep 5: sleep command delays the excution of the shell script by a certain amount of time, 5 means 5 seconds, time displays the running time of the command, in this time it roughly took 5 seconds to run the sleep command.

history: history outputs all the commands ran by the current terminal.
